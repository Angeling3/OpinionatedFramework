using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using IOKode.OpinionatedFramework.SourceGenerators.Helpers;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Scriban;
using Scriban.Runtime;

namespace IOKode.OpinionatedFramework.SourceGenerators.AspNetCoreIntegrations.Controllers;

internal partial class ControllersGenerator
{
    private class _Command
    {
        public string ClassName { get; set; }
        public string ClassNamespace { get; set; }
        public string HttpMethod { get; set; }
        public string ControllerRoute { get; set; }

        public string Name
        {
            get
            {
                var commandClassNameBuilder = new StringBuilder(ClassName);
                if (ClassName.EndsWith("Command"))
                {
                    commandClassNameBuilder.Length -= "Command".Length;
                }

                return commandClassNameBuilder.ToString();
            }
        }

        public string ControllerClassName => $"{Name}Controller";
    }
    
    private static IEnumerable<_Command> _GetCommands(Compilation compilation, ClassDeclarationSyntax manifestClassDeclarationSyntax, CancellationToken cancellationToken)
    {
        var semanticModel = compilation. GetSemanticModel(manifestClassDeclarationSyntax.SyntaxTree);
        // var manifestClassSymbol = (INamedTypeSymbol) semanticModel.GetDeclaredSymbol(manifestClassDeclarationSyntax)!;

        var classSymbols = compilation.SyntaxTrees
            .Select(tree => tree.GetRoot())
            .SelectMany(rootNode => rootNode
                .DescendantNodes()
                .OfType<ClassDeclarationSyntax>()
                .Select(classSyntax => (INamedTypeSymbol) semanticModel.GetDeclaredSymbol(classSyntax)!));
        
        var controllers = classSymbols
            .Where(classSymbol => classSymbol.Interfaces.Any(@interface => @interface.Name == "ICommandController"))
            .Select(classSymbol => new _Command
            {
                ClassName = classSymbol.Name,
                ClassNamespace = _GetNamespace(classSymbol),
                HttpMethod = _GetHttpMethod(classSymbol),
                ControllerRoute = _GetControllerRoute(classSymbol)
           });

        // var controllers = new[]
        // {
        //     new _Command
        //     {
        //         ClassName = "TestCommand",
        //         ClassNamespace = "Namespace.Test",
        //         HttpMethod = "HttpGet",
        //         ControllerRoute = "test"
        //     }
        // };
        
        return controllers;
    }

    private static string _GetNamespace(INamedTypeSymbol symbol)
    {
        return "IOKode.OpinionatedFramework.Controllers";
    }

    private static string _GetVerb = "Get";
    private static string _GetHttpMethod(INamedTypeSymbol symbol)
    {
        if (symbol.Name.StartsWith(_GetVerb))
        {
            return _GetVerb;
        }

        return string.Empty;
    }

    private static string _GetControllerRoute(INamedTypeSymbol symbol)
    {
        return "[Controller]";
    }

    private static string _GenerateControllerClass(_Command command)
    {
        return Template.Parse(_ControllerClassTemplate).Render(command, member => member.Name);
    }
    
    private static readonly string _ControllerClassTemplate =
        """
        // This file was auto-generated by a source generator
        using Microsoft.AspNetCore.Mvc;

        namespace {{ ClassNamespace }};

        [ApiController]
        [Route("{{ ControllerRoute }}")]
        public partial class {{ Name }}CommandController : ControllerBase
        {
            [{{ HttpMethod }}]
            public void {{ HttpMethod }}()
            {
                return;
            }
        }
        """;
}